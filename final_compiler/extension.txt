What I do in extension part is I create sample math calculator by using math
expression. The grammar like this:

<MATH SET>:= <NUMVAR> = <MATH EXPRESSION> ";"
<MATH EXPRESSION>:= <NUMVAR>|<NUMCON>
                    |<MATH EXPRESSION> "+" <MATH EXPRESSION>
                    |<MATH EXPRESSION> "-" <MATH EXPRESSION>
                    |<MATH EXPRESSION> "*" <MATH EXPRESSION>
                    |<MATH EXPRESSION> "/" <MATH EXPRESSION>
                    |<MATH EXPRESSION> "(" <MATH EXPRESSION>
                    |<MATH EXPRESSION> ")" <MATH EXPRESSION>

Emp:     %A = %B + %C * ( %D - 1 ) / 2 ;

There are several steps to complete this calculator:

1. to check whether there is a ';' in set statement.
2. find out the begin and the end of math expression
3. check the math expression is valid:
    a. +|-|*|/ are all Binary operator,
        so various = operators +1
    b. check ( and ) is valid
4. change math expression to Reverse Polish notation by stack
    a. read token flow one by one
    b. if there is a various insert to the link
    c. if there is a ), pop all the operator in the stack until meeting a (
    d. if there is a +|-,
        i. if stack is empty, push it in
        ii. if next stack elem is (, push it in
        iii. if next stack elem is else operators, insert the link
    e. if there is a (|*|/, push it in stack
    f. at the end, if any operators left in stack, pop them and insert in the link.
5. calculate the Reverse Polish notation by follow rules:
    a. if there is a various, push it in stack.
    b. if there is an operator, pop two various in the stack, push the result to
        the stack.
    c. at the end, the only one various in the stack is the result.


By use the math expression, I write a Monte Carlo Method to calculate PI, in file
test/Monte_Carlo_toPI.nal.
Unfortunately, because recursive bottom edge will lead to a stack overflow in limited
time recursive. The times Monte Carlo method could repeat only no more than 10,000 times.
It leads to the result is around 3.1
But it really works.
