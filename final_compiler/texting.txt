additional_test:

make -f additional_test.mk test
    #test1 is to test interpret how to deal with unexpect token.
    #test2 and test3 is to test parentheses and braces is valid.
    #test4,test5,test6 is to check IN2STR grammar.
    #test7,test8 is to check grammar in function INNUM.
    #test9,10,11 is to check function INC grammar.
    #test12,13 is to check function RND grammar.
    #test14 is to check function FILE grammar.
    #test15,16 is to check function JUMP grammar.
    #test17-24 is to check IFEQUAL and IFGREATER grammar.
    #test25,26 is to check SET grammar.
    #test27-29 is to check function PRINT/PRINTN grammar.
    #test30-31 is to check calculator grammar.


make -f nal.mk test0
    #test0 is to test every command is working well


make -f nal.mk runpi
    #test/Monte_Carlo_toPI.nal is to check every command is working well

make -f nal.mk test
    to base test given by neill

make -f nal.mk runescape211
    to run escape211


By use the math expression, I write a Monte Carlo Method to calculate PI, in file
test/Monte_Carlo_toPI.nal.
Unfortunately, because recursive bottom edge will lead to a stack overflow in limited
time recursive. The times Monte Carlo method could repeat only no more than 10,000 times.
(the times which program could repeat is based on operating system and machine)
It leads to the result is around 3.1  But it really works.

I use recursive to finish this assignment, it seems to the most fast and simple way to
write an interpret. But because it is limited by recursive times, stack overflow is always
a predictable ending to all hard job.
There are also a few ways to build interpret. Like by changing token flow to grammar tree or
using dynamic stack, they could all solve the stack overflow problem. But they could lead to
a huge code amount.

test1:
{
    WHILE
}
Error:
Fatal Error Unexpected token! occured in file ./test/additional_test/test1.nal

#test1 is to test interpret how to deal with unexpect token.

test2:
{
    {
}
Error:
Fatal Error Unexpected parentheses. occured in file ./test/additional_test/test2.nal

test3:
{
    (
}
Error:
Fatal Error Unexpected parentheses. occured in file ./test/additional_test/test3.nal

#test2 and test3 is to test parentheses and braces is valid.


test4:
{
    IN2STRING %A
}
Error:
Fatal Error No ( in IN2STR statement ? occured in file ./test/additional_test/test4.nal

test5:
{
    IN2STR ( , )
}
Error:
Fatal Error No STRVAR in IN2STR statement ? occured in file ./test/additional_test/test5.nal

test6:
{
    IN2STR ( $A $B )
}
Error:
Fatal Error No , in IN2STR statement ? occured in file ./test/additional_test/test6.nal

#test4,test5,test6 is to check IN2STR grammar.

test7:
{
    INNUM %A
}
Error:
Fatal Error No ( in INNUM statement ? occured in file ./test/additional_test/test7.nal

test8:
{
    INNUM ( )
}
Error:
Fatal Error No NUMVAR in INNUM statement ? occured in file ./test/additional_test/test8.nal

#test7,test8 is to check grammar in function INNUM.

test9:
{
    INC %A
}
Error:
Fatal Error No ( in INC statement ? occured in file ./test/additional_test/test9.nal

test10:
{
    INC ( )
}
Error:
Fatal Error No NUMVAR in INC statement ? occured in file ./test/additional_test/test10.nal

test11:
{
    INC ( %A )
}
Error:
Parsing is ok.
Fatal Error Variable not declared occured in file ./test/additional_test/test11.nal

#test9,10,11 is to check function INC grammar.

test12:
{
    RND %A
}
Error:
Fatal Error No ( in RND statement ? occured in file ./test/additional_test/test12.nal

test13:
{
    RND ( )
}
Error:
Fatal Error No NUMVAR in RND statement ? occured in file ./test/additional_test/test13.nal

#test12,13 is to check function RND grammar.

test14:
{
    FILE
}
Error:
Fatal Error No STRCON in FILE statement ? occured in file ./test/additional_test/test14.nal

#test14 is to check function FILE grammar.

test15:
{
    JUMP 10
}
Error:
Parsing is OK.
Fatal Error Invalid JUMP parameter occured in file ./test/additional_test/test15.nal

test16:
{
    JUMP
}
Error:
Fatal Error No NUMCON in JUMP statement ? occured in file ./test/additional_test/test16.nal

#test15,16 is to check function JUMP grammar.

test17:
{
    IFEQUAL %A , %B{

    }
}
Error:
Fatal Error Unexpected parentheses. occured in file ./test/additional_test/test17.nal

test18:
{
    IFEQUAL ( , %B ) {

    }
}
Error:
Fatal Error No VARCON in IFEQUAL statement ? occured in file ./test/additional_test/test18.nal

test19:
{
    IFEQUAL ( %A  %B ) {

    }
}
Error:
Fatal Error No , in IFEQUAL statement ? occured in file ./test/additional_test/test19.nal

test20:
{
    IFEQUAL ( %A , ) {

    }
}
Error:
Fatal Error No VARCON in IFEQUAL statement ? occured in file ./test/additional_test/test20.nal

test21:
{
    IFEQUAL ( %A , %B )

}
Error:
Fatal Error No { in IFEQUAL statement ? occured in file ./test/additional_test/test21.nal

test22:
{
    IFEQUAL ( %A , %B ){


}
Error:
Fatal Error Unexpected parentheses. occured in file ./test/additional_test/test22.nal

test23:
{
    IFGREATER ( %A , $B ) {

    }
}
Error:
Parsed OK
Fatal Error Uncomparable various in IFGREATER occured in file ./test/additional_test/test23.nal

test24:
{
    IFGREATER ( %A , 1 ) {

    }
}
Error:
Parsed OK
Fatal Error Variable not declared occured in file ./test/additional_test/test24.nal

#test17-24 is to check IFEQUAL and IFGREATER grammar.

test25:
{
    %A = $B
}
Error:
Parsed OK
Fatal Error Unexpected various in set grammar occured in file ./test/additional_test/test25.nal

test26:
{
    %A = %B
}
Error:
Parsed OK
Fatal Error Variable not declared occured in file ./test/additional_test/test26.nal

#test25,26 is to check SET grammar.

test27:
{
    PRINT
    JUMP 3
}
Error:
Fatal Error Unexpected print grammar. occured in file ./test/additional_test/test27.nal

test28:
{
    PRINT %A
}
Error:
Fatal Error Variable not declared occured in file ./test/additional_test/test28.nal

test29:
{
    PRINT "DHSFKH GGNJhkjh
}
Error:
Fatal Error Error! Can not find a vaild string. occured in file ./test/additional_test/test29.nal

#test27-29 is to check function PRINT/PRINTN grammar.

test30:
{
    %A = 1 + + 3 ;
}
Error:
Fatal Error Unexpected head token in a statement occured in file ./test/additional_test/test30.nal

test31:
{
    %A = 1 + ( 2 + ) ;
}
Error:
Fatal Error Unexpected head token in a statement occured in file ./test/additional_test/test31.nal

#test30-31 is to check calculator grammar.

